Class: Item
/**
 * Determines if this Item has a special entity for when they are in the world.
 * Is called when a EntityItem is spawned in the world, if true and Item#createCustomEntity
 * returns non null, the EntityItem will be destroyed and the new Entity will be added to the world.
 *
 * @param stack The current item stack
 * @return True of the item has a custom entity, If true, Item#createCustomEntity will be called
 */
public boolean hasCustomEntity(ItemStack stack)
{
    return false;
}
(Maybe use to make items blast and fire resistant)

Class: Item
/**
 * Returns the font renderer used to render tooltips and overlays for this item.
 * Returning null will use the standard font renderer.
 *
 * @param stack The current item stack
 * @return A instance of FontRenderer or null to use default
 */
@SideOnly(Side.CLIENT)
@Nullable
public net.minecraft.client.gui.FontRenderer getFontRenderer(ItemStack stack)
{
    return null;
}

Class: Item
/**
 * Gets the maximum number of items that this stack should be able to hold.
 * This is a ItemStack (and thus NBT) sensitive version of Item.getItemStackLimit()
 *
 * @param stack The ItemStack
 * @return The maximum number this item can be stacked to
 */
public int getItemStackLimit(ItemStack stack)
{
    return this.getItemStackLimit();
}
(Use to set the max stack limit for guns and launchers to 1)

player.setAbsorbtionAmount

player.getEntityAttribute(EntityPlayer.REACH_DISTANCE)

//	@Override
//	public ActionResult<ItemStack> onItemRightClick(World worldIn, EntityPlayer player, EnumHand handIn){
//		if (!worldIn.isRemote) {
//			this.time2=System.currentTimeMillis();
//			if (time2-time1>=this.cooldownTime || player.capabilities.isCreativeMode) {
//				int pieces=0;
//				for (ItemStack armor:player.getArmorInventoryList()) {
//					if (armor.getItem() instanceof CustomArmor || armor.getItem() instanceof DestructionArmor) {
//						pieces+=1;
//					}
//				}
//				if (pieces==4 || player.capabilities.isCreativeMode) {
//					for (int i=1;i<=1;i++) {
//						EntityLargeFireball entityFireball = new EntityLargeFireball(worldIn, player, 6F, 6F, 6F);
//						entityFireball.explosionPower=(int)this.power;
//						Vec3d looking = entityFireball.getLookVec();
//			            if (looking != null) {
//			            	entityFireball.motionX = looking.x*i;
//			            	entityFireball.motionY = looking.y*i;
//			            	entityFireball.motionZ = looking.z*i;
//			            	entityFireball.accelerationX = entityFireball.motionX * 0.1D;
//			            	entityFireball.accelerationY = entityFireball.motionY * 0.1D;
//			            	entityFireball.accelerationZ = entityFireball.motionZ * 0.1D;
//			            }
//			            worldIn.spawnEntity(entityFireball);
//					}
//				}
//				if (player.capabilities.isCreativeMode && this.power>9) this.power-=9;
//				else this.power=9;
//				this.time1=System.currentTimeMillis();
//			}
//			else {
//				int cooldown=(int)(this.cooldownTime-(this.time2-this.time1))/1000;
//				if (cooldown!=this.prevCooldown) {
//					ITextComponent text = (ITextComponent) new TextComponentString("Ability in Cooldown: "+(cooldown+1)+" Seconds Left");
//					player.sendMessage(text);
//					this.prevCooldown=cooldown;
//				}
//			}
//		}
//		return new ActionResult<ItemStack>(EnumActionResult.PASS, player.getHeldItem(handIn));
//	}